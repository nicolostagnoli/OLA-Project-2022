for j in range(0, 4):
  array_revenue = np.zeros(5)
  matrix_index = np.zeros(5,5)
  for i in range(0, 5):
    total_revenue = 0
    temp_price_index = optimal_prices_index
    temp_price_index[i] += 1
    temp_optimal_prices = [p1.price_vector[temp_price_index[0]], p2.price_vector[temp_price_index[1]], p3.price_vector[temp_price_index[2]],
                         p4.price_vector[temp_price_index[3]], p5.price_vector[temp_price_index[4]]]

    for uc in userClasses:
      for j in range(0, uc.number_of_user):
        initial_product = np.random.choice(5, 1, [a for a in uc.alfas])[0]

        history = simulate_episode(uc.p_matrix, 10, initial_product, 0.5)
        
        tot_products_bought = np.zeros(5)

        for row in history:
          tot_products_bought +=  row

        tot_products_bought *= uc.num_products_bought
        revenue_per_user = np.sum(tot_products_bought*optimal_prices)
        array_revenue[i] += revenue_per_user
        matrix_index[i][0] = temp_price_index
  
  for i in range(0,5):
    if(array_revenue[i]>best_total_revenue):
      best_total_revenue = array_revenue[i]
      optimal_prices_index =  matrix_index[i][0]
  
  j+=1
print(best_total_revenue)
print(optimal_prices_index)
